package com.example.wiprotest.service.instruments;import com.example.wiprotest.model.CalculatedPrice;import com.example.wiprotest.model.InstrumentPriceHistory;import com.example.wiprotest.utils.DateParser;import com.google.common.collect.ImmutableList;import org.junit.jupiter.api.Test;import java.text.ParseException;import java.util.List;import static org.junit.jupiter.api.Assertions.*;class Instrument3PriceCalculatorTest {	@Test	void calculate() throws ParseException {		// GIVEN		List<InstrumentPriceHistory> records = ImmutableList.<InstrumentPriceHistory>builder()			// old values, will be ignored			.add(new InstrumentPriceHistory("INSTRUMENTX", DateParser.parseDumpDate("01-JAN-2022"), 1000d))			.add(new InstrumentPriceHistory("INSTRUMENTX", DateParser.parseDumpDate("02-JAN-2022"), 1000d))			.add(new InstrumentPriceHistory("INSTRUMENTX", DateParser.parseDumpDate("03-JAN-2022"), 1000d))			// last 10 days			.add(new InstrumentPriceHistory("INSTRUMENTX", DateParser.parseDumpDate("01-JAN-2023"), 1d))			.add(new InstrumentPriceHistory("INSTRUMENTX", DateParser.parseDumpDate("02-JAN-2023"), 1d))			.add(new InstrumentPriceHistory("INSTRUMENTX", DateParser.parseDumpDate("03-JAN-2023"), 1d))			.add(new InstrumentPriceHistory("INSTRUMENTX", DateParser.parseDumpDate("04-JAN-2023"), 1d))			.add(new InstrumentPriceHistory("INSTRUMENTX", DateParser.parseDumpDate("05-JAN-2023"), 1d))			.add(new InstrumentPriceHistory("INSTRUMENTX", DateParser.parseDumpDate("06-JAN-2023"), 1d))			.add(new InstrumentPriceHistory("INSTRUMENTX", DateParser.parseDumpDate("07-JAN-2023"), 1d))			.add(new InstrumentPriceHistory("INSTRUMENTX", DateParser.parseDumpDate("08-JAN-2023"), 1d))			// last 2 days			.add(new InstrumentPriceHistory("INSTRUMENTX", DateParser.parseDumpDate("09-JAN-2023"), 2d))			.add(new InstrumentPriceHistory("INSTRUMENTX", DateParser.parseDumpDate("10-JAN-2023"), 2d))			.build();		// WHEN		CalculatedPrice calculatedPrice = new Instrument3PriceCalculator().calculate(records);		// THEN		assertEquals(1.6, calculatedPrice.calculatedPrice());	}}