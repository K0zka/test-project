package com.example.wiprotest.service.dao;import com.example.wiprotest.exceptions.DaoException;import com.example.wiprotest.model.InstrumentPriceModifier;import com.zaxxer.hikari.HikariConfig;import com.zaxxer.hikari.HikariDataSource;import org.junit.jupiter.api.AfterEach;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import java.sql.SQLException;import java.sql.Statement;import java.util.UUID;import static org.junit.jupiter.api.Assertions.*;class InstrumentPriceModifierDaoImplTest {	private HikariDataSource dataSource;	@BeforeEach	void setupDatabase() throws SQLException {		// GIVEN		HikariConfig hikariConfig = new HikariConfig();		hikariConfig.setDriverClassName(org.h2.Driver.class.getName());		hikariConfig.setJdbcUrl("jdbc:h2:" + System.getProperty("user.dir") + "/h2-test-database");		dataSource = new HikariDataSource(hikariConfig);		try (Statement statement = dataSource.getConnection().createStatement()) {			// no time to set up liquibase, this is indeed not nice this way			statement.execute("CREATE TABLE INSTRUMENT_PRICE_MODIFIER(" +				"ID LONG PRIMARY KEY," +				"NAME VARCHAR(128) NOT NULL," +				"MULTIPLIER DOUBLE NOT NULL" +				")");			statement.execute("CREATE INDEX INSTRUMENT_PRICE_MODIFIER_NAME_IDX ON INSTRUMENT_PRICE_MODIFIER(NAME)");			statement.execute("INSERT INTO INSTRUMENT_PRICE_MODIFIER(ID, NAME, MULTIPLIER) VALUES (1, 'INSTRUMENT1', 1.5)");		}	}	@AfterEach	void cleanDatabase() throws SQLException {		try (Statement statement = dataSource.getConnection().createStatement()) {			// no time to set up liquibase, but this is indeed not nice this way			statement.execute("DROP INDEX INSTRUMENT_PRICE_MODIFIER_NAME_IDX");			statement.execute("DROP TABLE INSTRUMENT_PRICE_MODIFIER");		}	}	@Test	void getByNamWithNonExisting() throws DaoException {		// WHEN		InstrumentPriceModifier nonExisting = new InstrumentPriceModifierDaoImpl(dataSource).getByName("INSTRUMENT-NONEXISTING-" + UUID.randomUUID());		// THEN		assertNull(nonExisting);	}	@Test	void getByName() throws DaoException {		// WHEN		InstrumentPriceModifier instrument1Modifier = new InstrumentPriceModifierDaoImpl(dataSource).getByName("INSTRUMENT1");		// THEN		assertNotNull(instrument1Modifier);		assertEquals("INSTRUMENT1", instrument1Modifier.name());		assertEquals(1.5, instrument1Modifier.modifier());	}}