package com.example.wiprotest.service.instruments;import com.example.wiprotest.model.CalculatedPrice;import com.example.wiprotest.model.InstrumentPriceHistory;import com.example.wiprotest.service.InstrumentPriceCalculator;import java.util.Comparator;import java.util.List;import static com.example.wiprotest.utils.ListUtils.checkNotEmpty;/** * SPEC: For INSTRUMENT3 â€“ any other statistical calculation that we can compute "on-the-fly" as we read the file (it's up to you) * * own idea: average from the average of last 10 days and the average of last 2 days */public class Instrument3PriceCalculator implements InstrumentPriceCalculator {	@Override	public CalculatedPrice calculate(List<InstrumentPriceHistory> history) {		checkNotEmpty(history);		return new CalculatedPrice(			history.get(0).name(),			calculateAverage(history)		);	}	private static double calculateAverage(List<InstrumentPriceHistory> history) {		return (getAverageOfLastNDays(history, 10) + getAverageOfLastNDays(history, 2)) / 2;	}	private static double getAverageOfLastNDays(List<InstrumentPriceHistory> history, int lastNDays) {		return history.stream()			.sorted(Comparator.comparing(InstrumentPriceHistory::date).reversed())			.limit(lastNDays)			.mapToDouble(InstrumentPriceHistory::value).summaryStatistics().getAverage();	}}