package com.example.wiprotest.service.instruments;import com.example.wiprotest.model.CalculatedPrice;import com.example.wiprotest.model.InstrumentPriceHistory;import com.example.wiprotest.service.InstrumentPriceCalculator;import java.util.Calendar;import java.util.Date;import java.util.GregorianCalendar;import java.util.List;import java.util.stream.Collectors;import static com.example.wiprotest.utils.ListUtils.checkNotEmpty;/** * SPEC: mean for November 2014 */public class Instrument2PriceCalculator implements InstrumentPriceCalculator {	public static final int INSTRUMENT2_RELEVANT_YEAR = 2014;	static boolean isNov2014(Date date) {		GregorianCalendar calendar = new GregorianCalendar();		calendar.setTime(date);		return calendar.get(Calendar.YEAR) == INSTRUMENT2_RELEVANT_YEAR			&& calendar.get(Calendar.MONTH) == Calendar.NOVEMBER;	}	@Override	public CalculatedPrice calculate(List<InstrumentPriceHistory> history) {		checkNotEmpty(history);		return new CalculatedPrice(			history.get(0).name(),			history.stream()				.filter(record -> isNov2014(record.date()))				.collect(Collectors.averagingDouble(InstrumentPriceHistory::value))		);	}}