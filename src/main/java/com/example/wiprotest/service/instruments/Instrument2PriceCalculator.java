package com.example.wiprotest.service.instruments;import com.example.wiprotest.model.CalculatedPrice;import com.example.wiprotest.model.InstrumentPriceHistory;import com.example.wiprotest.service.InstrumentPriceCalculator;import java.util.*;import java.util.stream.Collectors;import static com.example.wiprotest.utils.ListUtils.checkNotEmpty;/** * SPEC: mean for November 2014 */public class Instrument2PriceCalculator implements InstrumentPriceCalculator {	public static final int INSTRUMENT2_RELEVANT_YEAR = 2014;	List<Double> values = new ArrayList<>();	static boolean isNov2014(Date date) {		GregorianCalendar calendar = new GregorianCalendar();		calendar.setTime(date);		return calendar.get(Calendar.YEAR) == INSTRUMENT2_RELEVANT_YEAR			&& calendar.get(Calendar.MONTH) == Calendar.NOVEMBER;	}	@Override	public void consume(InstrumentPriceHistory history) {		if (isNov2014(history.date())) {			values.add(history.value());		}	}	@Override	public CalculatedPrice calculate() {		OptionalDouble average = values.stream().mapToDouble(it -> it).average();		if (average.isEmpty()) {			throw new IllegalArgumentException("No values consumed");		} else {			return new CalculatedPrice(				"INSTRUMENT2",				average.getAsDouble()			);		}	}}