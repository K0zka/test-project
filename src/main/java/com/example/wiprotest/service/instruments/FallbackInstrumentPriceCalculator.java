package com.example.wiprotest.service.instruments;import com.example.wiprotest.model.CalculatedPrice;import com.example.wiprotest.model.InstrumentPriceHistory;import com.example.wiprotest.service.InstrumentPriceCalculator;import java.util.Comparator;import java.util.List;import static com.example.wiprotest.utils.ListUtils.checkNotEmpty;/** * SPEC: For any other instrument from the input file - sum of the newest 10 elements (in terms of the date). */public class FallbackInstrumentPriceCalculator implements InstrumentPriceCalculator {	public static final int LAST_RECENT_RECORDS_LIMIT = 10;	@Override	public CalculatedPrice calculate(List<InstrumentPriceHistory> history) {		checkNotEmpty(history);		return new CalculatedPrice(			"DEFAULT",			history.stream()				.sorted(Comparator.comparing(InstrumentPriceHistory::date).reversed())				.limit(LAST_RECENT_RECORDS_LIMIT)				.mapToDouble(InstrumentPriceHistory::value)				.summaryStatistics().getSum()		);	}}