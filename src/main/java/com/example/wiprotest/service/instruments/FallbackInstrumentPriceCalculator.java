package com.example.wiprotest.service.instruments;import com.example.wiprotest.model.CalculatedPrice;import com.example.wiprotest.model.InstrumentPriceHistory;import com.example.wiprotest.service.InstrumentPriceCalculator;import java.util.ArrayList;import java.util.Comparator;import java.util.List;import java.util.stream.Collectors;import static com.example.wiprotest.utils.ListUtils.reduceList;/** * SPEC: For any other instrument from the input file - sum of the newest 10 elements (in terms of the date). */public class FallbackInstrumentPriceCalculator implements InstrumentPriceCalculator {	final String name;	List<InstrumentPriceHistory> lastNRecords = new ArrayList<>();	public static final int LAST_RECENT_RECORDS_LIMIT = 10;	public FallbackInstrumentPriceCalculator(String name) {		this.name = name;	}	@Override	public void consume(InstrumentPriceHistory history) {		lastNRecords.add(history);		if (lastNRecords.size() > LAST_RECENT_RECORDS_LIMIT) {			lastNRecords = reduceList(				lastNRecords,				LAST_RECENT_RECORDS_LIMIT,				Comparator.comparing(InstrumentPriceHistory::date).reversed()			);		}	}	@Override	public CalculatedPrice calculate() {		return new CalculatedPrice(name, lastNRecords.stream().mapToDouble(InstrumentPriceHistory::value).sum());	}}