package com.example.wiprotest.service;import com.example.wiprotest.exceptions.DaoException;import com.example.wiprotest.model.CalculatedPrice;import com.example.wiprotest.model.InstrumentPriceHistory;import com.example.wiprotest.model.InstrumentPriceModifier;import com.example.wiprotest.service.instruments.Instrument1PriceCalculator;import com.example.wiprotest.service.instruments.Instrument2PriceCalculator;import com.example.wiprotest.service.instruments.Instrument3PriceCalculator;import com.google.common.collect.ImmutableMap;import java.util.List;import java.util.Map;import java.util.stream.Collectors;import static java.util.stream.Collectors.groupingBy;public class CalculatorImpl implements Calculator {	private final InstrumentPriceModifierDao instrumentPriceModifierDao;	private final Map<String, InstrumentPriceCalculator> instrumentPriceCalculators = ImmutableMap.<String, InstrumentPriceCalculator>builder()		.put("INSTRUMENT1", new Instrument1PriceCalculator())		.put("INSTRUMENT2", new Instrument2PriceCalculator())		.put("INSTRUMENT3", new Instrument3PriceCalculator())		.build();	public CalculatorImpl(InstrumentPriceModifierDao instrumentPriceModifierDao) {		this.instrumentPriceModifierDao = instrumentPriceModifierDao;	}	@Override	public List<CalculatedPrice> calculatePrices(List<InstrumentPriceHistory> history) {		Map<String, List<InstrumentPriceHistory>> historyByInstrumentName =			history.stream().collect(groupingBy(InstrumentPriceHistory::name));		return historyByInstrumentName.entrySet().stream()			.map(				(entry) -> {					CalculatedPrice calculatedPrice = instrumentPriceCalculators.get(entry.getKey()).calculate(entry.getValue());					InstrumentPriceModifier priceModifier = loadPriceModifier(entry);					if (priceModifier == null) {						return calculatedPrice;					} else {						return new CalculatedPrice(							calculatedPrice.name(),							priceModifier.modifier() * calculatedPrice.calculatedPrice()						);					}				}			)			.collect(Collectors.toList());	}	private InstrumentPriceModifier loadPriceModifier(Map.Entry<String, List<InstrumentPriceHistory>> entry) {		try {			return instrumentPriceModifierDao.getByName(entry.getKey());		} catch (DaoException e) {			throw new RuntimeException(e);		}	}}