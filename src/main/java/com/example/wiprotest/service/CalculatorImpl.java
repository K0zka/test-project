package com.example.wiprotest.service;import com.example.wiprotest.exceptions.DaoException;import com.example.wiprotest.model.CalculatedPrice;import com.example.wiprotest.model.InstrumentPriceHistory;import com.example.wiprotest.model.InstrumentPriceModifier;import com.example.wiprotest.service.instruments.FallbackInstrumentPriceCalculator;import com.example.wiprotest.service.instruments.Instrument1PriceCalculator;import com.example.wiprotest.service.instruments.Instrument2PriceCalculator;import com.example.wiprotest.service.instruments.Instrument3PriceCalculator;import com.google.common.collect.Maps;import java.util.List;import java.util.Map;import java.util.stream.Collectors;import java.util.stream.Stream;public class CalculatorImpl implements Calculator {	private final InstrumentPriceModifierDao instrumentPriceModifierDao;	public CalculatorImpl(InstrumentPriceModifierDao instrumentPriceModifierDao) {		this.instrumentPriceModifierDao = instrumentPriceModifierDao;	}	private static InstrumentPriceCalculator getPriceCalculator(Map<String, InstrumentPriceCalculator> instrumentPriceCalculators, String instrumentName) {		InstrumentPriceCalculator calculator = instrumentPriceCalculators.get(instrumentName);		if (calculator == null) {			calculator = new FallbackInstrumentPriceCalculator(instrumentName);			instrumentPriceCalculators.put(instrumentName, calculator);		}		return calculator;	}	private static Map<String, InstrumentPriceCalculator> buildInitialMap() {		final Map<String, InstrumentPriceCalculator> instrumentPriceCalculators = Maps.newHashMap();		instrumentPriceCalculators.put("INSTRUMENT1", new Instrument1PriceCalculator());		instrumentPriceCalculators.put("INSTRUMENT2", new Instrument2PriceCalculator());		instrumentPriceCalculators.put("INSTRUMENT3", new Instrument3PriceCalculator());		return instrumentPriceCalculators;	}	@Override	public List<CalculatedPrice> calculatePrices(Stream<InstrumentPriceHistory> history) {		final Map<String, InstrumentPriceCalculator> instrumentPriceCalculators = buildInitialMap();		history			.forEach(				(entry) -> {					InstrumentPriceCalculator instrumentPriceCalculator = getPriceCalculator(instrumentPriceCalculators, entry.name());					instrumentPriceCalculator.consume(entry);				}			);		return instrumentPriceCalculators.values().stream()			.map(InstrumentPriceCalculator::calculate)			.map(this::updateWithPriceModifier)			.collect(Collectors.toList());	}	private CalculatedPrice updateWithPriceModifier(CalculatedPrice calculatedPrice) {		final InstrumentPriceModifier priceModifier = loadPriceModifier(calculatedPrice.name());		if (priceModifier == null) {			return calculatedPrice;		} else {			return new CalculatedPrice(				calculatedPrice.name(),				calculatedPrice.calculatedPrice() * priceModifier.modifier()			);		}	}	private InstrumentPriceModifier loadPriceModifier(String instrumentName) {		try {			return instrumentPriceModifierDao.getByName(instrumentName);		} catch (DaoException e) {			throw new RuntimeException(e);		}	}}